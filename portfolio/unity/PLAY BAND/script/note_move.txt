using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using Unity.Burst.Intrinsics;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;

public class note_move : MonoBehaviour
{
    public Vector2 destination,zoom;
    public float firstSpeed;
    public float speed;
    public Text click_score;
    public GameObject Lanes;

    public bool G_touch_bar = false;
    // Start is called before the first frame update
    void Start()
    {
        click_score = GameObject.Find("click_score").GetComponent<Text>();
        Lanes = GameObject.Find("Lanes");

        if (Regex.IsMatch(gameObject.name, @"^G_gap_L[1-7]{1}")){
            gameObject.transform.localScale = new Vector2(0.0015f, 0.0015f);
            zoom = new Vector2(0.03f, 0.03f);
        }
        else
        {
            gameObject.transform.localScale = new Vector2(0.1f, 0.1f);
            zoom = new Vector2(3.5f, 3.5f);
        }
        switch (this.gameObject.tag)
        {
            case "Lane1":
                gameObject.transform.position = new Vector2(-0.727f, 4.176f);
                destination = new Vector2(-6.9f, -5f);
                break;

            case "Lane2":
                gameObject.transform.position = new Vector2(-0.476f, 4.176f);
                destination = new Vector2(-4.6f, -5f);
                break;

            case "Lane3":
                gameObject.transform.position = new Vector2(-0.21f, 4.176f);
                destination = new Vector2(-2.2f, -5f);
                break;

            case "Lane4":
                gameObject.transform.position = new Vector2(0f, 4.176f);
                destination = new Vector2(0f, -5f);
                break;

            case "Lane5":
                gameObject.transform.position = new Vector2(0.21f, 4.176f);
                destination = new Vector2(2.2f, -5f);
                break;

            case "Lane6":
                gameObject.transform.position = new Vector2(0.476f, 4.176f);
                destination = new Vector2(4.6f, -5f);
                break;

            case "Lane7":
                gameObject.transform.position = new Vector2(0.727f, 4.176f);
                destination = new Vector2(6.9f, -5f);
                break;
        }
        
        //speed = 0.1f * Time.deltaTime * speed;
        
    }

    // Update is called once per frame
    void Update()
    {
        //gameObject.transform.position = Vector3.Lerp(gameObject.transform.position, destination, speed);
        gameObject.transform.position = Vector2.MoveTowards(gameObject.transform.position, destination, speed * Time.deltaTime);
        if (!G_touch_bar)
        {
            gameObject.transform.localScale = Vector2.Lerp(gameObject.transform.localScale, zoom, calculateNewSpeed());
        }
        //speed = calculateNewSpeed();

        if(this.gameObject.transform.position.y == -5f)
        {

            if(this.gameObject.name == "G1(Clone)" || this.gameObject.name == "G2(Clone)" || this.gameObject.name == "G3(Clone)" || this.gameObject.name == "G4(Clone)" || this.gameObject.name == "G5(Clone)" || this.gameObject.name == "G6(Clone)" || this.gameObject.name == "G7(Clone)" || this.gameObject.name == "G_gap_L1(Clone)" || this.gameObject.name == "G_gap_L2(Clone)" || this.gameObject.name == "G_gap_L3(Clone)" || this.gameObject.name == "G_gap_L4(Clone)" || this.gameObject.name == "G_gap_L5(Clone)" || this.gameObject.name == "G_gap_L6(Clone)" || this.gameObject.name == "G_gap_L7(Clone)")
            {
                this.speed = 0f;
            }
            else
            {
                Destroy(this.gameObject);
                Lanes.GetComponent<Total_score>().total_score = 0;
                Lanes.GetComponent<Total_score>().change_score();
                Lanes.GetComponent<Total_score>().miss_s += 1;
                click_score.color = new Color(0f, 0f, 0f, 255f);
                click_score.text = "Miss";
            } 
        }
    }

    public float calculateNewSpeed()
    {
        float tmp = Vector2.Distance(gameObject.transform.position, destination);

        if (tmp == 0)
            return tmp;
        else
        {
            speed *= (1.005f + Time.deltaTime);
            return (Vector2.Distance(gameObject.transform.position, destination) * speed * 0.2f * Time.deltaTime / tmp);
        }
            
    }

    public float getFirst_speed()
    {
        return firstSpeed;
    }
    public void set_speed(float speed)
    {
        this.speed = speed;
        firstSpeed = Vector2.Distance(gameObject.transform.position, destination) * speed * 0.05f * Time.deltaTime;
    }
}
