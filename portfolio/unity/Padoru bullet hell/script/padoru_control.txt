using Fungus;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.UI;
//using static UnityEditor.PlayerSettings;

public class padoru_control : MonoBehaviour
{
    public int HP = 500, Max_HP;
    public GameObject[] bullet;
    public GameObject health_bar;
    private Vector3 hp_pos;
    private GameObject b;
    private int type = 1;

    private int counter = 0;
    private Vector3 padoru_pos = new Vector3();

    public int m_seconds = 60;
    public int m_sec;
    private bool timer = true;

    public Text time;

    public GameObject stop;

    private Vector3 first_pos;
    public bool move = false;
    private AudioSource audio;
    private int num = 0;
    // Start is called before the first frame update
    void Start()
    {
        Max_HP = HP;
        hp_pos = health_bar.transform.position;
        m_sec = m_seconds;
        first_pos = this.transform.position;
        audio = this.gameObject.GetComponent<AudioSource>();
    }

    // Update is called once per frame
    void Update()
    {
        if (stop.active == false)
        {
            if (move)
            {
                this.gameObject.transform.localPosition = Vector3.MoveTowards(gameObject.transform.localPosition, first_pos, 2.5f * Time.deltaTime);
                if(this.transform.position == first_pos)
                {
                    move = false;
                }
            }
            else
            {
                counter++;
                if (timer)
                {
                    StartCoroutine(Countdown());
                    timer = false;
                }
                //padoru move
                if (counter > 120 && counter % 240 == 0)
                {
                    padoru_pos = new Vector3(Random.Range(-8, 8) - this.transform.position.x, Random.Range(2, 4) - this.transform.position.y, 0);
                }
                if (counter > 120 && counter % 240 <= 120)
                {
                    transform.Translate(padoru_pos / 120f);
                }

                if (type == 1)
                {
                    Vector3 bullet_angle = new Vector3(0, 0, Random.Range(0, 360));
                    Vector3 pos = this.transform.position + new Vector3(Random.Range(-0.5f, 0.5f) < 0 ? 1 : -1, Random.Range(-0.5f, 0.5f) < 0 ? 1 : -1, 0);
                    if (counter % 10 == 0)
                    {
                        b = Instantiate(bullet[0], transform.position, new Quaternion(0, 0, 0, 0));
                        b.GetComponent<padoru_bullet>().bc.Init = Quaternion.Euler(bullet_angle);
                        b.GetComponent<padoru_bullet>().bc.position = pos;
                        b.GetComponent<padoru_bullet>().bc.Initspeed = new Vector3(0, 0.01f, 0);
                        set_speed();
                        set_trace();
                    }
                }
                if (type == 2)
                {
                    Vector3 bullet_angle = new Vector3(0, 0, Random.Range(0, 360));
                    Vector3 pos = this.transform.position;
                    if (counter % 120 == 0)
                    {
                        for (int i = 0; i < 30; i++)
                        {
                            float z = bullet_angle.z + (360 / 30) * i;
                            //bullet 1
                            b = Instantiate(bullet[0], transform.position, new Quaternion(0, 0, 0, 0));
                            b.GetComponent<padoru_bullet>().bc.Init = Quaternion.Euler(new Vector3(0, 0, z));
                            b.GetComponent<padoru_bullet>().bc.position = pos;
                            b.GetComponent<padoru_bullet>().bc.Initspeed = new Vector3(0, 0.01f, 0);
                            set_speed();

                            // bullet 2
                            int r;
                            if (Random.Range(-1, 1) >= 0)
                            {
                                r = 1;
                            }
                            else
                            {
                                r = -1;
                            }
                            b = Instantiate(bullet[1], transform.position, new Quaternion(0, 0, 0, 0));
                            b.GetComponent<padoru_bullet>().bc.Init = Quaternion.Euler(new Vector3(0, 0, z));
                            b.GetComponent<padoru_bullet>().bc.position = pos + new Vector3(r * Mathf.Cos(z * Mathf.Deg2Rad) * 2, r * -1 * Mathf.Sin(z * Mathf.Deg2Rad) * 2, 0); ;
                            b.GetComponent<padoru_bullet>().bc.Initspeed = new Vector3(0, 0.03f, 0);
                            set_speed();
                        }
                    }
                }
                if (type == 3)
                {
                    Vector3 bullet_angle = new Vector3(0, 0, Random.Range(0, 360));
                    Vector3 pos = this.transform.position;
                    if (counter % 120 == 0)
                    {
                        //bullet 1
                        for (int i = 0; i < 30; i++)
                        {
                            float z = bullet_angle.z + (360 / 30) * i;
                            b = Instantiate(bullet[1], transform.position, new Quaternion(0, 0, 0, 0));
                            b.GetComponent<padoru_bullet>().bc.Init = Quaternion.Euler(new Vector3(0, 0, z));
                            b.GetComponent<padoru_bullet>().bc.position = pos + new Vector3(Mathf.Cos(z) * 2, Mathf.Sin(z) * 2, 0);
                            b.GetComponent<padoru_bullet>().bc.Initspeed = new Vector3(0, 0.01f, 0);
                            set_speed();
                        }
                        //bullet 2
                        if (counter % 240 == 0)
                        {
                            for (int i = 0; i < 10; i++)
                            {
                                pos = new Vector3(transform.position.x + 1, transform.position.y, 0);
                                b = Instantiate(bullet[2], transform.position, new Quaternion(0, 0, 0, 0));
                                b.GetComponent<padoru_bullet>().bc.Init = Quaternion.Euler(new Vector3(0, 0, 0));
                                b.GetComponent<padoru_bullet>().bc.position = pos;
                                b.GetComponent<padoru_bullet>().bc.Initspeed = new Vector3(0, 0.04f + i * 0.005f, 0);
                                set_trace();

                                pos = new Vector3(transform.position.x - 1, transform.position.y, 0);
                                b = Instantiate(bullet[2], transform.position, new Quaternion(0, 0, 0, 0));
                                b.GetComponent<padoru_bullet>().bc.Init = Quaternion.Euler(new Vector3(0, 0, 0));
                                b.GetComponent<padoru_bullet>().bc.position = pos;
                                b.GetComponent<padoru_bullet>().bc.Initspeed = new Vector3(0, 0.04f + i * 0.005f, 0);
                                set_trace();
                            }
                        }
                    }
                }
            }
        }

    }
    void LateUpdate()
    {
        if (HP <= 0 || m_sec <= 0)
        {
            if (type == 3)
            {
               Destroy(this.gameObject);
            }
            else
            {
                HP = Max_HP;
                health_bar.transform.position = hp_pos;
                move = true;
                
                m_sec = m_seconds;
                StopAllCoroutines();
                StartCoroutine(Countdown());
            }
            type++;
        }    
    }
    void set_speed()
    {
        //¥[³t
        b.GetComponent<padoru_bullet>().bc.speed_up_bool = true;
        b.GetComponent<padoru_bullet>().bc.speed_up_value = 0.00005f;
    }
    
    void set_rotate()
    {
        //±ÛÂà
        b.GetComponent<padoru_bullet>().bc.rotate_bool = true;
        b.GetComponent<padoru_bullet>().bc.rotate_value = Random.Range(-0.5f, 0.5f);

    }
    void set_trace()
    {
        //°lÂÜ
        b.GetComponent<padoru_bullet>().bc.trace_bool = true;
        b.GetComponent<padoru_bullet>().bc.trace_value = 0;
        b.GetComponent<padoru_bullet>().bc.trace_count = 1;
    }
    IEnumerator Countdown()
    {
        time.text = m_sec.ToString();
   

        while (m_seconds > 0)                   
        {
            yield return new WaitForSeconds(1);                    
            m_sec--;                                  
            time.text = m_sec.ToString();
            
        }

        yield return new WaitForSeconds(1);
        StopCoroutine(Countdown());
    }
    void OnTriggerEnter2D(Collider2D collision)
    {
        audio.Play();
    }

}
